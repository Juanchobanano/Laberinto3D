<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the player
//z = 64;
instance_create(0, 0, o_ini_world);
z = 16;
dir = -90;

// Set the default draw color to white
draw_set_colour(c_white);

target_dir = dir;
target_x = x;
target_y = y;
target_z = z;



// Create emitter.
//player_em = audio_emitter_create();

 
/*audio_stop_sound(sn_starwars);
wars = audio_emitter_create();
audio_emitter_falloff(wars, 1, 50, 1);
audio_emitter_position(wars, 288, 288, 16);
audio_emitter_gain(wars, .6);
audio_play_sound_on(wars, sn_starwars, 1, 0);*/

// Start 3D Drawi
d3d_start();
//d3d_set_perspective(true);

/*dark_purple = make_colour_rgb(27, 3, 59);
d3d_set_fog(true, dark_purple, 96, 128);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy emitter.
audio_emitter_free(player_em);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Jump control.
if(z == 48){ target_z = 16; }

// Input process.
if(keyboard_check_pressed(vk_left)){
    target_dir += 90;
}

if(keyboard_check_pressed(vk_right)){
    target_dir -= 90;
}

if(keyboard_check_pressed(vk_up)){
    var vect_x = lengthdir_x(32, target_dir);
    var vect_y = lengthdir_y(32, target_dir);
    audio_play_sound(sn_walk_gravel, 1, 0);
    if(!place_meeting(target_x + vect_x, target_y + vect_y, o_walls)){
        target_x += vect_x;
        target_y += vect_y;
    }
}

if(keyboard_check_pressed(vk_down)){
    var vect_x = lengthdir_x(32, target_dir);
    var vect_y = lengthdir_y(32, target_dir);
    audio_play_sound(sn_walk_gravel, 1, 0);
    if(!place_meeting(target_x - vect_x, target_y - vect_y, o_walls)){
        target_x -= vect_x;
        target_y -= vect_y;
    }
}

if(keyboard_check_pressed(vk_space)){
    if(z == 16){ target_z = z + 32; }
}

/*

audio_emitter_pitch(player_em, irandom_range(1.2, 1.5));
audio_emitter_gain(player_em, .8);
audio_emitter_position(player_em, x, y, z);
audio_emitter_falloff(player_em, 50, 100, 1);
audio_play_sound_on(player_em, sn_walk_gravel, 0, 1);

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw controls.

// Set gui size.
display_set_gui_size(view_wview[0], view_hview[0]);

// Create controls.
draw_sprite(spr_boton, 0, 47, 312);
draw_sprite(spr_boton, 0, 47, 312);
draw_sprite(spr_boton, 0, 47, 312);
draw_sprite(spr_boton, 0, 47, 312);
draw_sprite(spr_boton, 0, 47, 312);
B_up = instance_create(47, 312, Button_Up);
B_down = instance_create(149, 312, Button_Down);
B_left = instance_create(494, 312, Button_Left);
B_right = instance_create(592, 312, Button_Right);
B_A = instance_create(592, 216, Button_A);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the projection.

// Update the direction and position
var am = .1;
dir = lerp(dir, target_dir, am);
x = lerp(x, target_x, am);
y = lerp(y, target_y, am);
z = lerp(z, target_z, am);

// Get the view direction vector
var vect_x = lengthdir_x(32, dir);
var vect_y = lengthdir_y(32, dir);

// Set the projection.
//d3d_set_projection(x-64, y, z, x + vect_x, y + vect_y, z-64+16, 0, 0, 1);
d3d_set_projection(x, y, z, x + vect_x, y + vect_y, z, 0, 0, 1);


/*d3d_set_lighting(true);
//d3d_set_shading(true)
d3d_light_define_point(1, x, y, z, 128, c_white);
d3d_light_enable(1, true);
//d3d_light_define_ambient($000000)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
